<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="238"><g><title>perf-exec (7 samples, 2.94%)</title><rect x="0.0000%" y="917" width="2.9412%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="927.50">pe..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="901" width="2.9412%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="911.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="885" width="2.9412%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="895.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="869" width="2.9412%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="7"/><text x="0.2500%" y="879.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="853" width="2.9412%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="863.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="837" width="2.9412%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="847.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="821" width="2.9412%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="831.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="805" width="2.9412%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="815.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="789" width="2.9412%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="799.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="773" width="2.9412%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="7"/><text x="0.2500%" y="783.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="757" width="2.9412%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="7"/><text x="0.2500%" y="767.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="741" width="2.9412%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="725" width="2.9412%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="7"/><text x="0.2500%" y="735.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="709" width="2.9412%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="719.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="693" width="2.9412%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="7"/><text x="0.2500%" y="703.50">[u..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="0.0000%" y="677" width="2.9412%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="7"/><text x="0.2500%" y="687.50">[u..</text></g><g><title>[unknown] (49 samples, 20.59%)</title><rect x="2.9412%" y="901" width="20.5882%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="49"/><text x="3.1912%" y="911.50">[unknown]</text></g><g><title>[unknown] (49 samples, 20.59%)</title><rect x="2.9412%" y="885" width="20.5882%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="49"/><text x="3.1912%" y="895.50">[unknown]</text></g><g><title>[unknown] (49 samples, 20.59%)</title><rect x="2.9412%" y="869" width="20.5882%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="49"/><text x="3.1912%" y="879.50">[unknown]</text></g><g><title>[unknown] (47 samples, 19.75%)</title><rect x="3.7815%" y="853" width="19.7479%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="47"/><text x="4.0315%" y="863.50">[unknown]</text></g><g><title>[unknown] (46 samples, 19.33%)</title><rect x="4.2017%" y="837" width="19.3277%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="46"/><text x="4.4517%" y="847.50">[unknown]</text></g><g><title>[unknown] (44 samples, 18.49%)</title><rect x="5.0420%" y="821" width="18.4874%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="44"/><text x="5.2920%" y="831.50">[unknown]</text></g><g><title>[unknown] (44 samples, 18.49%)</title><rect x="5.0420%" y="805" width="18.4874%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="44"/><text x="5.2920%" y="815.50">[unknown]</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="21.0084%" y="789" width="2.5210%" height="15" fill="rgb(247,18,42)" fg:x="50" fg:w="6"/><text x="21.2584%" y="799.50">[u..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="21.4286%" y="773" width="2.1008%" height="15" fill="rgb(241,131,45)" fg:x="51" fg:w="5"/><text x="21.6786%" y="783.50">[..</text></g><g><title>[unknown] (3 samples, 1.26%)</title><rect x="22.2689%" y="757" width="1.2605%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="3"/><text x="22.5189%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="22.6891%" y="741" width="0.8403%" height="15" fill="rgb(225,111,53)" fg:x="54" fg:w="2"/><text x="22.9391%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="22.6891%" y="725" width="0.8403%" height="15" fill="rgb(238,160,17)" fg:x="54" fg:w="2"/><text x="22.9391%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="23.1092%" y="709" width="0.4202%" height="15" fill="rgb(214,148,48)" fg:x="55" fg:w="1"/><text x="23.3592%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="23.1092%" y="693" width="0.4202%" height="15" fill="rgb(232,36,49)" fg:x="55" fg:w="1"/><text x="23.3592%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="23.1092%" y="677" width="0.4202%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="1"/><text x="23.3592%" y="687.50"></text></g><g><title>__clone3 (1 samples, 0.42%)</title><rect x="23.5294%" y="901" width="0.4202%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="1"/><text x="23.7794%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="23.5294%" y="885" width="0.4202%" height="15" fill="rgb(213,181,19)" fg:x="56" fg:w="1"/><text x="23.7794%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="23.5294%" y="869" width="0.4202%" height="15" fill="rgb(254,191,54)" fg:x="56" fg:w="1"/><text x="23.7794%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="23.5294%" y="853" width="0.4202%" height="15" fill="rgb(241,83,37)" fg:x="56" fg:w="1"/><text x="23.7794%" y="863.50"></text></g><g><title>__libc_start_main_impl (1 samples, 0.42%)</title><rect x="23.9496%" y="885" width="0.4202%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="1"/><text x="24.1996%" y="895.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.42%)</title><rect x="23.9496%" y="869" width="0.4202%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="1"/><text x="24.1996%" y="879.50"></text></g><g><title>main (1 samples, 0.42%)</title><rect x="23.9496%" y="853" width="0.4202%" height="15" fill="rgb(245,192,40)" fg:x="57" fg:w="1"/><text x="24.1996%" y="863.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.42%)</title><rect x="23.9496%" y="837" width="0.4202%" height="15" fill="rgb(238,167,29)" fg:x="57" fg:w="1"/><text x="24.1996%" y="847.50"></text></g><g><title>std::thread::Thread::new (1 samples, 0.42%)</title><rect x="23.9496%" y="821" width="0.4202%" height="15" fill="rgb(232,182,51)" fg:x="57" fg:w="1"/><text x="24.1996%" y="831.50"></text></g><g><title>star-vs-chain-e (52 samples, 21.85%)</title><rect x="2.9412%" y="917" width="21.8487%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="52"/><text x="3.1912%" y="927.50">star-vs-chain-e</text></g><g><title>_start (2 samples, 0.84%)</title><rect x="23.9496%" y="901" width="0.8403%" height="15" fill="rgb(208,69,12)" fg:x="57" fg:w="2"/><text x="24.1996%" y="911.50"></text></g><g><title>_dl_start (1 samples, 0.42%)</title><rect x="24.3697%" y="885" width="0.4202%" height="15" fill="rgb(235,93,37)" fg:x="58" fg:w="1"/><text x="24.6197%" y="895.50"></text></g><g><title>_dl_start_final (1 samples, 0.42%)</title><rect x="24.3697%" y="869" width="0.4202%" height="15" fill="rgb(213,116,39)" fg:x="58" fg:w="1"/><text x="24.6197%" y="879.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.42%)</title><rect x="24.3697%" y="853" width="0.4202%" height="15" fill="rgb(222,207,29)" fg:x="58" fg:w="1"/><text x="24.6197%" y="863.50"></text></g><g><title>dl_main (1 samples, 0.42%)</title><rect x="24.3697%" y="837" width="0.4202%" height="15" fill="rgb(206,96,30)" fg:x="58" fg:w="1"/><text x="24.6197%" y="847.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.42%)</title><rect x="24.3697%" y="821" width="0.4202%" height="15" fill="rgb(218,138,4)" fg:x="58" fg:w="1"/><text x="24.6197%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="805" width="0.4202%" height="15" fill="rgb(250,191,14)" fg:x="58" fg:w="1"/><text x="24.6197%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="789" width="0.4202%" height="15" fill="rgb(239,60,40)" fg:x="58" fg:w="1"/><text x="24.6197%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="773" width="0.4202%" height="15" fill="rgb(206,27,48)" fg:x="58" fg:w="1"/><text x="24.6197%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="757" width="0.4202%" height="15" fill="rgb(225,35,8)" fg:x="58" fg:w="1"/><text x="24.6197%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="741" width="0.4202%" height="15" fill="rgb(250,213,24)" fg:x="58" fg:w="1"/><text x="24.6197%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="725" width="0.4202%" height="15" fill="rgb(247,123,22)" fg:x="58" fg:w="1"/><text x="24.6197%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="709" width="0.4202%" height="15" fill="rgb(231,138,38)" fg:x="58" fg:w="1"/><text x="24.6197%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="693" width="0.4202%" height="15" fill="rgb(231,145,46)" fg:x="58" fg:w="1"/><text x="24.6197%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="677" width="0.4202%" height="15" fill="rgb(251,118,11)" fg:x="58" fg:w="1"/><text x="24.6197%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="24.3697%" y="661" width="0.4202%" height="15" fill="rgb(217,147,25)" fg:x="58" fg:w="1"/><text x="24.6197%" y="671.50"></text></g><g><title>__libc_thread_freeres (8 samples, 3.36%)</title><rect x="24.7899%" y="869" width="3.3613%" height="15" fill="rgb(247,81,37)" fg:x="59" fg:w="8"/><text x="25.0399%" y="879.50">__l..</text></g><g><title>__res_thread_freeres (8 samples, 3.36%)</title><rect x="24.7899%" y="853" width="3.3613%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="8"/><text x="25.0399%" y="863.50">__r..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="837" width="3.3613%" height="15" fill="rgb(227,1,9)" fg:x="59" fg:w="8"/><text x="25.0399%" y="847.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="821" width="3.3613%" height="15" fill="rgb(248,47,43)" fg:x="59" fg:w="8"/><text x="25.0399%" y="831.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="805" width="3.3613%" height="15" fill="rgb(221,10,30)" fg:x="59" fg:w="8"/><text x="25.0399%" y="815.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="789" width="3.3613%" height="15" fill="rgb(210,229,1)" fg:x="59" fg:w="8"/><text x="25.0399%" y="799.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="773" width="3.3613%" height="15" fill="rgb(222,148,37)" fg:x="59" fg:w="8"/><text x="25.0399%" y="783.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="757" width="3.3613%" height="15" fill="rgb(234,67,33)" fg:x="59" fg:w="8"/><text x="25.0399%" y="767.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="741" width="3.3613%" height="15" fill="rgb(247,98,35)" fg:x="59" fg:w="8"/><text x="25.0399%" y="751.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="725" width="3.3613%" height="15" fill="rgb(247,138,52)" fg:x="59" fg:w="8"/><text x="25.0399%" y="735.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="709" width="3.3613%" height="15" fill="rgb(213,79,30)" fg:x="59" fg:w="8"/><text x="25.0399%" y="719.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="693" width="3.3613%" height="15" fill="rgb(246,177,23)" fg:x="59" fg:w="8"/><text x="25.0399%" y="703.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="677" width="3.3613%" height="15" fill="rgb(230,62,27)" fg:x="59" fg:w="8"/><text x="25.0399%" y="687.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="661" width="3.3613%" height="15" fill="rgb(216,154,8)" fg:x="59" fg:w="8"/><text x="25.0399%" y="671.50">[un..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="24.7899%" y="645" width="3.3613%" height="15" fill="rgb(244,35,45)" fg:x="59" fg:w="8"/><text x="25.0399%" y="655.50">[un..</text></g><g><title>std::sys::pal::unix::thread::Thread::set_name (1 samples, 0.42%)</title><rect x="28.1513%" y="837" width="0.4202%" height="15" fill="rgb(251,115,12)" fg:x="67" fg:w="1"/><text x="28.4013%" y="847.50"></text></g><g><title>__pthread_setname_np (1 samples, 0.42%)</title><rect x="28.1513%" y="821" width="0.4202%" height="15" fill="rgb(240,54,50)" fg:x="67" fg:w="1"/><text x="28.4013%" y="831.50"></text></g><g><title>__GI___prctl (1 samples, 0.42%)</title><rect x="28.1513%" y="805" width="0.4202%" height="15" fill="rgb(233,84,52)" fg:x="67" fg:w="1"/><text x="28.4013%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.1513%" y="789" width="0.4202%" height="15" fill="rgb(207,117,47)" fg:x="67" fg:w="1"/><text x="28.4013%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.1513%" y="773" width="0.4202%" height="15" fill="rgb(249,43,39)" fg:x="67" fg:w="1"/><text x="28.4013%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.1513%" y="757" width="0.4202%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="1"/><text x="28.4013%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.1513%" y="741" width="0.4202%" height="15" fill="rgb(236,212,23)" fg:x="67" fg:w="1"/><text x="28.4013%" y="751.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.42%)</title><rect x="28.5714%" y="805" width="0.4202%" height="15" fill="rgb(242,79,21)" fg:x="68" fg:w="1"/><text x="28.8214%" y="815.50"></text></g><g><title>tcache_init (1 samples, 0.42%)</title><rect x="28.5714%" y="789" width="0.4202%" height="15" fill="rgb(211,96,35)" fg:x="68" fg:w="1"/><text x="28.8214%" y="799.50"></text></g><g><title>tcache_init (1 samples, 0.42%)</title><rect x="28.5714%" y="773" width="0.4202%" height="15" fill="rgb(253,215,40)" fg:x="68" fg:w="1"/><text x="28.8214%" y="783.50"></text></g><g><title>arena_get2 (1 samples, 0.42%)</title><rect x="28.5714%" y="757" width="0.4202%" height="15" fill="rgb(211,81,21)" fg:x="68" fg:w="1"/><text x="28.8214%" y="767.50"></text></g><g><title>arena_get2 (1 samples, 0.42%)</title><rect x="28.5714%" y="741" width="0.4202%" height="15" fill="rgb(208,190,38)" fg:x="68" fg:w="1"/><text x="28.8214%" y="751.50"></text></g><g><title>_int_new_arena (1 samples, 0.42%)</title><rect x="28.5714%" y="725" width="0.4202%" height="15" fill="rgb(235,213,38)" fg:x="68" fg:w="1"/><text x="28.8214%" y="735.50"></text></g><g><title>new_heap (1 samples, 0.42%)</title><rect x="28.5714%" y="709" width="0.4202%" height="15" fill="rgb(237,122,38)" fg:x="68" fg:w="1"/><text x="28.8214%" y="719.50"></text></g><g><title>alloc_new_heap (1 samples, 0.42%)</title><rect x="28.5714%" y="693" width="0.4202%" height="15" fill="rgb(244,218,35)" fg:x="68" fg:w="1"/><text x="28.8214%" y="703.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.42%)</title><rect x="28.5714%" y="677" width="0.4202%" height="15" fill="rgb(240,68,47)" fg:x="68" fg:w="1"/><text x="28.8214%" y="687.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.42%)</title><rect x="28.5714%" y="661" width="0.4202%" height="15" fill="rgb(210,16,53)" fg:x="68" fg:w="1"/><text x="28.8214%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="645" width="0.4202%" height="15" fill="rgb(235,124,12)" fg:x="68" fg:w="1"/><text x="28.8214%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="629" width="0.4202%" height="15" fill="rgb(224,169,11)" fg:x="68" fg:w="1"/><text x="28.8214%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="613" width="0.4202%" height="15" fill="rgb(250,166,2)" fg:x="68" fg:w="1"/><text x="28.8214%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="597" width="0.4202%" height="15" fill="rgb(242,216,29)" fg:x="68" fg:w="1"/><text x="28.8214%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="581" width="0.4202%" height="15" fill="rgb(230,116,27)" fg:x="68" fg:w="1"/><text x="28.8214%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="565" width="0.4202%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="1"/><text x="28.8214%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="549" width="0.4202%" height="15" fill="rgb(253,11,6)" fg:x="68" fg:w="1"/><text x="28.8214%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="533" width="0.4202%" height="15" fill="rgb(247,143,39)" fg:x="68" fg:w="1"/><text x="28.8214%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="517" width="0.4202%" height="15" fill="rgb(236,97,10)" fg:x="68" fg:w="1"/><text x="28.8214%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="501" width="0.4202%" height="15" fill="rgb(233,208,19)" fg:x="68" fg:w="1"/><text x="28.8214%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="28.5714%" y="485" width="0.4202%" height="15" fill="rgb(216,164,2)" fg:x="68" fg:w="1"/><text x="28.8214%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (2 samples, 0.84%)</title><rect x="28.5714%" y="837" width="0.8403%" height="15" fill="rgb(220,129,5)" fg:x="68" fg:w="2"/><text x="28.8214%" y="847.50"></text></g><g><title>__pthread_getattr_np (2 samples, 0.84%)</title><rect x="28.5714%" y="821" width="0.8403%" height="15" fill="rgb(242,17,10)" fg:x="68" fg:w="2"/><text x="28.8214%" y="831.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.42%)</title><rect x="28.9916%" y="805" width="0.4202%" height="15" fill="rgb(242,107,0)" fg:x="69" fg:w="1"/><text x="29.2416%" y="815.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.42%)</title><rect x="29.4118%" y="805" width="0.4202%" height="15" fill="rgb(251,28,31)" fg:x="70" fg:w="1"/><text x="29.6618%" y="815.50"></text></g><g><title>syscall (1 samples, 0.42%)</title><rect x="29.4118%" y="789" width="0.4202%" height="15" fill="rgb(233,223,10)" fg:x="70" fg:w="1"/><text x="29.6618%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="773" width="0.4202%" height="15" fill="rgb(215,21,27)" fg:x="70" fg:w="1"/><text x="29.6618%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="757" width="0.4202%" height="15" fill="rgb(232,23,21)" fg:x="70" fg:w="1"/><text x="29.6618%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="741" width="0.4202%" height="15" fill="rgb(244,5,23)" fg:x="70" fg:w="1"/><text x="29.6618%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="725" width="0.4202%" height="15" fill="rgb(226,81,46)" fg:x="70" fg:w="1"/><text x="29.6618%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="709" width="0.4202%" height="15" fill="rgb(247,70,30)" fg:x="70" fg:w="1"/><text x="29.6618%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="693" width="0.4202%" height="15" fill="rgb(212,68,19)" fg:x="70" fg:w="1"/><text x="29.6618%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="677" width="0.4202%" height="15" fill="rgb(240,187,13)" fg:x="70" fg:w="1"/><text x="29.6618%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="661" width="0.4202%" height="15" fill="rgb(223,113,26)" fg:x="70" fg:w="1"/><text x="29.6618%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="645" width="0.4202%" height="15" fill="rgb(206,192,2)" fg:x="70" fg:w="1"/><text x="29.6618%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="29.4118%" y="629" width="0.4202%" height="15" fill="rgb(241,108,4)" fg:x="70" fg:w="1"/><text x="29.6618%" y="639.50"></text></g><g><title>tokio::runtime::context::current::&lt;impl tokio::runtime::context::Context&gt;::set_current (1 samples, 0.42%)</title><rect x="29.8319%" y="725" width="0.4202%" height="15" fill="rgb(247,173,49)" fg:x="71" fg:w="1"/><text x="30.0819%" y="735.50"></text></g><g><title>__floattidf (1 samples, 0.42%)</title><rect x="30.6723%" y="709" width="0.4202%" height="15" fill="rgb(224,114,35)" fg:x="73" fg:w="1"/><text x="30.9223%" y="719.50"></text></g><g><title>__pow (4 samples, 1.68%)</title><rect x="31.0924%" y="709" width="1.6807%" height="15" fill="rgb(245,159,27)" fg:x="74" fg:w="4"/><text x="31.3424%" y="719.50"></text></g><g><title>__ieee754_pow_fma (2 samples, 0.84%)</title><rect x="31.9328%" y="693" width="0.8403%" height="15" fill="rgb(245,172,44)" fg:x="76" fg:w="2"/><text x="32.1828%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.42%)</title><rect x="32.7731%" y="709" width="0.4202%" height="15" fill="rgb(236,23,11)" fg:x="78" fg:w="1"/><text x="33.0231%" y="719.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (7 samples, 2.94%)</title><rect x="34.8739%" y="677" width="2.9412%" height="15" fill="rgb(205,117,38)" fg:x="83" fg:w="7"/><text x="35.1239%" y="687.50">pa..</text></g><g><title>syscall (6 samples, 2.52%)</title><rect x="35.2941%" y="661" width="2.5210%" height="15" fill="rgb(237,72,25)" fg:x="84" fg:w="6"/><text x="35.5441%" y="671.50">sy..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="645" width="2.1008%" height="15" fill="rgb(244,70,9)" fg:x="85" fg:w="5"/><text x="35.9643%" y="655.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="629" width="2.1008%" height="15" fill="rgb(217,125,39)" fg:x="85" fg:w="5"/><text x="35.9643%" y="639.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="613" width="2.1008%" height="15" fill="rgb(235,36,10)" fg:x="85" fg:w="5"/><text x="35.9643%" y="623.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="597" width="2.1008%" height="15" fill="rgb(251,123,47)" fg:x="85" fg:w="5"/><text x="35.9643%" y="607.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="581" width="2.1008%" height="15" fill="rgb(221,13,13)" fg:x="85" fg:w="5"/><text x="35.9643%" y="591.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="565" width="2.1008%" height="15" fill="rgb(238,131,9)" fg:x="85" fg:w="5"/><text x="35.9643%" y="575.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="549" width="2.1008%" height="15" fill="rgb(211,50,8)" fg:x="85" fg:w="5"/><text x="35.9643%" y="559.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="533" width="2.1008%" height="15" fill="rgb(245,182,24)" fg:x="85" fg:w="5"/><text x="35.9643%" y="543.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="35.7143%" y="517" width="2.1008%" height="15" fill="rgb(242,14,37)" fg:x="85" fg:w="5"/><text x="35.9643%" y="527.50">[..</text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="36.9748%" y="501" width="0.8403%" height="15" fill="rgb(246,228,12)" fg:x="88" fg:w="2"/><text x="37.2248%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="36.9748%" y="485" width="0.8403%" height="15" fill="rgb(213,55,15)" fg:x="88" fg:w="2"/><text x="37.2248%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="36.9748%" y="469" width="0.8403%" height="15" fill="rgb(209,9,3)" fg:x="88" fg:w="2"/><text x="37.2248%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="36.9748%" y="453" width="0.8403%" height="15" fill="rgb(230,59,30)" fg:x="88" fg:w="2"/><text x="37.2248%" y="463.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.84%)</title><rect x="37.8151%" y="677" width="0.8403%" height="15" fill="rgb(209,121,21)" fg:x="90" fg:w="2"/><text x="38.0651%" y="687.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (2 samples, 0.84%)</title><rect x="37.8151%" y="661" width="0.8403%" height="15" fill="rgb(220,109,13)" fg:x="90" fg:w="2"/><text x="38.0651%" y="671.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.42%)</title><rect x="38.2353%" y="645" width="0.4202%" height="15" fill="rgb(232,18,1)" fg:x="91" fg:w="1"/><text x="38.4853%" y="655.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.42%)</title><rect x="38.2353%" y="629" width="0.4202%" height="15" fill="rgb(215,41,42)" fg:x="91" fg:w="1"/><text x="38.4853%" y="639.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.42%)</title><rect x="38.6555%" y="661" width="0.4202%" height="15" fill="rgb(224,123,36)" fg:x="92" fg:w="1"/><text x="38.9055%" y="671.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.42%)</title><rect x="38.6555%" y="645" width="0.4202%" height="15" fill="rgb(240,125,3)" fg:x="92" fg:w="1"/><text x="38.9055%" y="655.50"></text></g><g><title>[[vdso]] (1 samples, 0.42%)</title><rect x="38.6555%" y="629" width="0.4202%" height="15" fill="rgb(205,98,50)" fg:x="92" fg:w="1"/><text x="38.9055%" y="639.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.42%)</title><rect x="39.0756%" y="661" width="0.4202%" height="15" fill="rgb(205,185,37)" fg:x="93" fg:w="1"/><text x="39.3256%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="645" width="0.4202%" height="15" fill="rgb(238,207,15)" fg:x="94" fg:w="1"/><text x="39.7458%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="629" width="0.4202%" height="15" fill="rgb(213,199,42)" fg:x="94" fg:w="1"/><text x="39.7458%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="613" width="0.4202%" height="15" fill="rgb(235,201,11)" fg:x="94" fg:w="1"/><text x="39.7458%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="597" width="0.4202%" height="15" fill="rgb(207,46,11)" fg:x="94" fg:w="1"/><text x="39.7458%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="581" width="0.4202%" height="15" fill="rgb(241,35,35)" fg:x="94" fg:w="1"/><text x="39.7458%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="565" width="0.4202%" height="15" fill="rgb(243,32,47)" fg:x="94" fg:w="1"/><text x="39.7458%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="549" width="0.4202%" height="15" fill="rgb(247,202,23)" fg:x="94" fg:w="1"/><text x="39.7458%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="533" width="0.4202%" height="15" fill="rgb(219,102,11)" fg:x="94" fg:w="1"/><text x="39.7458%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="39.4958%" y="517" width="0.4202%" height="15" fill="rgb(243,110,44)" fg:x="94" fg:w="1"/><text x="39.7458%" y="527.50"></text></g><g><title>[unknown] (19 samples, 7.98%)</title><rect x="40.3361%" y="613" width="7.9832%" height="15" fill="rgb(222,74,54)" fg:x="96" fg:w="19"/><text x="40.5861%" y="623.50">[unknown]</text></g><g><title>[unknown] (19 samples, 7.98%)</title><rect x="40.3361%" y="597" width="7.9832%" height="15" fill="rgb(216,99,12)" fg:x="96" fg:w="19"/><text x="40.5861%" y="607.50">[unknown]</text></g><g><title>[unknown] (19 samples, 7.98%)</title><rect x="40.3361%" y="581" width="7.9832%" height="15" fill="rgb(226,22,26)" fg:x="96" fg:w="19"/><text x="40.5861%" y="591.50">[unknown]</text></g><g><title>[unknown] (19 samples, 7.98%)</title><rect x="40.3361%" y="565" width="7.9832%" height="15" fill="rgb(217,163,10)" fg:x="96" fg:w="19"/><text x="40.5861%" y="575.50">[unknown]</text></g><g><title>[unknown] (18 samples, 7.56%)</title><rect x="40.7563%" y="549" width="7.5630%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="18"/><text x="41.0063%" y="559.50">[unknown]</text></g><g><title>[unknown] (16 samples, 6.72%)</title><rect x="41.5966%" y="533" width="6.7227%" height="15" fill="rgb(252,105,26)" fg:x="99" fg:w="16"/><text x="41.8466%" y="543.50">[unknown]</text></g><g><title>[unknown] (12 samples, 5.04%)</title><rect x="43.2773%" y="517" width="5.0420%" height="15" fill="rgb(220,39,43)" fg:x="103" fg:w="12"/><text x="43.5273%" y="527.50">[unkno..</text></g><g><title>[unknown] (10 samples, 4.20%)</title><rect x="44.1176%" y="501" width="4.2017%" height="15" fill="rgb(229,68,48)" fg:x="105" fg:w="10"/><text x="44.3676%" y="511.50">[unkn..</text></g><g><title>[unknown] (9 samples, 3.78%)</title><rect x="44.5378%" y="485" width="3.7815%" height="15" fill="rgb(252,8,32)" fg:x="106" fg:w="9"/><text x="44.7878%" y="495.50">[unk..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="45.7983%" y="469" width="2.5210%" height="15" fill="rgb(223,20,43)" fg:x="109" fg:w="6"/><text x="46.0483%" y="479.50">[u..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="46.2185%" y="453" width="2.1008%" height="15" fill="rgb(229,81,49)" fg:x="110" fg:w="5"/><text x="46.4685%" y="463.50">[..</text></g><g><title>[unknown] (4 samples, 1.68%)</title><rect x="46.6387%" y="437" width="1.6807%" height="15" fill="rgb(236,28,36)" fg:x="111" fg:w="4"/><text x="46.8887%" y="447.50"></text></g><g><title>[unknown] (4 samples, 1.68%)</title><rect x="46.6387%" y="421" width="1.6807%" height="15" fill="rgb(249,185,26)" fg:x="111" fg:w="4"/><text x="46.8887%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.26%)</title><rect x="47.0588%" y="405" width="1.2605%" height="15" fill="rgb(249,174,33)" fg:x="112" fg:w="3"/><text x="47.3088%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="47.4790%" y="389" width="0.8403%" height="15" fill="rgb(233,201,37)" fg:x="113" fg:w="2"/><text x="47.7290%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="47.8992%" y="373" width="0.4202%" height="15" fill="rgb(221,78,26)" fg:x="114" fg:w="1"/><text x="48.1492%" y="383.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (21 samples, 8.82%)</title><rect x="39.9160%" y="645" width="8.8235%" height="15" fill="rgb(250,127,30)" fg:x="95" fg:w="21"/><text x="40.1660%" y="655.50">mio::sys::un..</text></g><g><title>epoll_wait (20 samples, 8.40%)</title><rect x="40.3361%" y="629" width="8.4034%" height="15" fill="rgb(230,49,44)" fg:x="96" fg:w="20"/><text x="40.5861%" y="639.50">epoll_wait</text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.42%)</title><rect x="48.3193%" y="613" width="0.4202%" height="15" fill="rgb(229,67,23)" fg:x="115" fg:w="1"/><text x="48.5693%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.42%)</title><rect x="48.7395%" y="613" width="0.4202%" height="15" fill="rgb(249,83,47)" fg:x="116" fg:w="1"/><text x="48.9895%" y="623.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.42%)</title><rect x="48.7395%" y="597" width="0.4202%" height="15" fill="rgb(215,43,3)" fg:x="116" fg:w="1"/><text x="48.9895%" y="607.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (25 samples, 10.50%)</title><rect x="39.4958%" y="661" width="10.5042%" height="15" fill="rgb(238,154,13)" fg:x="94" fg:w="25"/><text x="39.7458%" y="671.50">tokio::runtime:..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (3 samples, 1.26%)</title><rect x="48.7395%" y="645" width="1.2605%" height="15" fill="rgb(219,56,2)" fg:x="116" fg:w="3"/><text x="48.9895%" y="655.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 1.26%)</title><rect x="48.7395%" y="629" width="1.2605%" height="15" fill="rgb(233,0,4)" fg:x="116" fg:w="3"/><text x="48.9895%" y="639.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.84%)</title><rect x="49.1597%" y="613" width="0.8403%" height="15" fill="rgb(235,30,7)" fg:x="117" fg:w="2"/><text x="49.4097%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (41 samples, 17.23%)</title><rect x="33.1933%" y="709" width="17.2269%" height="15" fill="rgb(250,79,13)" fg:x="79" fg:w="41"/><text x="33.4433%" y="719.50">tokio::runtime::scheduler::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (38 samples, 15.97%)</title><rect x="34.4538%" y="693" width="15.9664%" height="15" fill="rgb(211,146,34)" fg:x="82" fg:w="38"/><text x="34.7038%" y="703.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::time::Driver::park_internal (28 samples, 11.76%)</title><rect x="38.6555%" y="677" width="11.7647%" height="15" fill="rgb(228,22,38)" fg:x="92" fg:w="28"/><text x="38.9055%" y="687.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.42%)</title><rect x="50.0000%" y="661" width="0.4202%" height="15" fill="rgb(235,168,5)" fg:x="119" fg:w="1"/><text x="50.2500%" y="671.50"></text></g><g><title>std::panicking::try (1 samples, 0.42%)</title><rect x="51.2605%" y="677" width="0.4202%" height="15" fill="rgb(221,155,16)" fg:x="122" fg:w="1"/><text x="51.5105%" y="687.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.42%)</title><rect x="51.6807%" y="661" width="0.4202%" height="15" fill="rgb(215,215,53)" fg:x="123" fg:w="1"/><text x="51.9307%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;star_vs_chain_execution::chain::chain_benchmark_server::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.42%)</title><rect x="52.1008%" y="661" width="0.4202%" height="15" fill="rgb(223,4,10)" fg:x="124" fg:w="1"/><text x="52.3508%" y="671.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.42%)</title><rect x="53.3613%" y="565" width="0.4202%" height="15" fill="rgb(234,103,6)" fg:x="127" fg:w="1"/><text x="53.6113%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.84%)</title><rect x="53.3613%" y="581" width="0.8403%" height="15" fill="rgb(227,97,0)" fg:x="127" fg:w="2"/><text x="53.6113%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="53.7815%" y="565" width="0.4202%" height="15" fill="rgb(234,150,53)" fg:x="128" fg:w="1"/><text x="54.0315%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="53.7815%" y="549" width="0.4202%" height="15" fill="rgb(228,201,54)" fg:x="128" fg:w="1"/><text x="54.0315%" y="559.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.42%)</title><rect x="53.7815%" y="533" width="0.4202%" height="15" fill="rgb(222,22,37)" fg:x="128" fg:w="1"/><text x="54.0315%" y="543.50"></text></g><g><title>tcap::packet_types::tcap::&lt;impl core::convert::From&lt;tcap::packet_types::tcap::IpAddress&gt; for alloc::string::String&gt;::from (3 samples, 1.26%)</title><rect x="53.3613%" y="629" width="1.2605%" height="15" fill="rgb(237,53,32)" fg:x="127" fg:w="3"/><text x="53.6113%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 1.26%)</title><rect x="53.3613%" y="613" width="1.2605%" height="15" fill="rgb(233,25,53)" fg:x="127" fg:w="3"/><text x="53.6113%" y="623.50"></text></g><g><title>core::fmt::write (3 samples, 1.26%)</title><rect x="53.3613%" y="597" width="1.2605%" height="15" fill="rgb(210,40,34)" fg:x="127" fg:w="3"/><text x="53.6113%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.42%)</title><rect x="54.2017%" y="581" width="0.4202%" height="15" fill="rgb(241,220,44)" fg:x="129" fg:w="1"/><text x="54.4517%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.42%)</title><rect x="54.2017%" y="565" width="0.4202%" height="15" fill="rgb(235,28,35)" fg:x="129" fg:w="1"/><text x="54.4517%" y="575.50"></text></g><g><title>tcap::capabilities::tcap::Capability::request_invoke_with_continuation_wait_param::{{closure}} (5 samples, 2.10%)</title><rect x="52.9412%" y="645" width="2.1008%" height="15" fill="rgb(210,56,17)" fg:x="126" fg:w="5"/><text x="53.1912%" y="655.50">t..</text></g><g><title>tcap::service::tcap::SendRequest::new (1 samples, 0.42%)</title><rect x="54.6218%" y="629" width="0.4202%" height="15" fill="rgb(224,130,29)" fg:x="130" fg:w="1"/><text x="54.8718%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.42%)</title><rect x="54.6218%" y="613" width="0.4202%" height="15" fill="rgb(235,212,8)" fg:x="130" fg:w="1"/><text x="54.8718%" y="623.50"></text></g><g><title>star_vs_chain_execution::chain::chain_benchmark_server::_{{closure}}::_{{closure}}::_{{closure}} (8 samples, 3.36%)</title><rect x="52.5210%" y="661" width="3.3613%" height="15" fill="rgb(223,33,50)" fg:x="125" fg:w="8"/><text x="52.7710%" y="671.50">sta..</text></g><g><title>tokio::sync::mutex::Mutex&lt;T&gt;::lock::{{closure}} (2 samples, 0.84%)</title><rect x="55.0420%" y="645" width="0.8403%" height="15" fill="rgb(219,149,13)" fg:x="131" fg:w="2"/><text x="55.2920%" y="655.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.42%)</title><rect x="55.4622%" y="629" width="0.4202%" height="15" fill="rgb(250,156,29)" fg:x="132" fg:w="1"/><text x="55.7122%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tcap::capabilities::tcap::Capability::request_invoke_with_continuation_wait_param::{{closure}}&gt; (1 samples, 0.42%)</title><rect x="56.3025%" y="629" width="0.4202%" height="15" fill="rgb(216,193,19)" fg:x="134" fg:w="1"/><text x="56.5525%" y="639.50"></text></g><g><title>star_vs_chain_execution::star::star_benchmark_server::_{{closure}}::_{{closure}}::_{{closure}} (4 samples, 1.68%)</title><rect x="55.8824%" y="661" width="1.6807%" height="15" fill="rgb(216,135,14)" fg:x="133" fg:w="4"/><text x="56.1324%" y="671.50"></text></g><g><title>tcap::capabilities::tcap::Capability::request_invoke::{{closure}} (4 samples, 1.68%)</title><rect x="55.8824%" y="645" width="1.6807%" height="15" fill="rgb(241,47,5)" fg:x="133" fg:w="4"/><text x="56.1324%" y="655.50"></text></g><g><title>tcap::capabilities::tcap::Capability::request_invoke_with_continuation_wait_param::{{closure}} (2 samples, 0.84%)</title><rect x="56.7227%" y="629" width="0.8403%" height="15" fill="rgb(233,42,35)" fg:x="135" fg:w="2"/><text x="56.9727%" y="639.50"></text></g><g><title>tcap::service::tcap::SendRequest::new (1 samples, 0.42%)</title><rect x="57.1429%" y="613" width="0.4202%" height="15" fill="rgb(231,13,6)" fg:x="136" fg:w="1"/><text x="57.3929%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.42%)</title><rect x="57.1429%" y="597" width="0.4202%" height="15" fill="rgb(207,181,40)" fg:x="136" fg:w="1"/><text x="57.3929%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.42%)</title><rect x="57.1429%" y="581" width="0.4202%" height="15" fill="rgb(254,173,49)" fg:x="136" fg:w="1"/><text x="57.3929%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.42%)</title><rect x="58.8235%" y="613" width="0.4202%" height="15" fill="rgb(221,1,38)" fg:x="140" fg:w="1"/><text x="59.0735%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="58.8235%" y="597" width="0.4202%" height="15" fill="rgb(206,124,46)" fg:x="140" fg:w="1"/><text x="59.0735%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="58.8235%" y="581" width="0.4202%" height="15" fill="rgb(249,21,11)" fg:x="140" fg:w="1"/><text x="59.0735%" y="591.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.42%)</title><rect x="58.8235%" y="565" width="0.4202%" height="15" fill="rgb(222,201,40)" fg:x="140" fg:w="1"/><text x="59.0735%" y="575.50"></text></g><g><title>_int_realloc (1 samples, 0.42%)</title><rect x="58.8235%" y="549" width="0.4202%" height="15" fill="rgb(235,61,29)" fg:x="140" fg:w="1"/><text x="59.0735%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.42%)</title><rect x="59.2437%" y="581" width="0.4202%" height="15" fill="rgb(219,207,3)" fg:x="141" fg:w="1"/><text x="59.4937%" y="591.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.42%)</title><rect x="59.2437%" y="565" width="0.4202%" height="15" fill="rgb(222,56,46)" fg:x="141" fg:w="1"/><text x="59.4937%" y="575.50"></text></g><g><title>&lt;core::net::socket_addr::SocketAddrV4 as core::fmt::Display&gt;::fmt (3 samples, 1.26%)</title><rect x="58.8235%" y="645" width="1.2605%" height="15" fill="rgb(239,76,54)" fg:x="140" fg:w="3"/><text x="59.0735%" y="655.50"></text></g><g><title>core::fmt::write (3 samples, 1.26%)</title><rect x="58.8235%" y="629" width="1.2605%" height="15" fill="rgb(231,124,27)" fg:x="140" fg:w="3"/><text x="59.0735%" y="639.50"></text></g><g><title>&lt;core::net::ip_addr::Ipv4Addr as core::fmt::Display&gt;::fmt (2 samples, 0.84%)</title><rect x="59.2437%" y="613" width="0.8403%" height="15" fill="rgb(249,195,6)" fg:x="141" fg:w="2"/><text x="59.4937%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.84%)</title><rect x="59.2437%" y="597" width="0.8403%" height="15" fill="rgb(237,174,47)" fg:x="141" fg:w="2"/><text x="59.4937%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.42%)</title><rect x="59.6639%" y="581" width="0.4202%" height="15" fill="rgb(206,201,31)" fg:x="142" fg:w="1"/><text x="59.9139%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.42%)</title><rect x="59.6639%" y="565" width="0.4202%" height="15" fill="rgb(231,57,52)" fg:x="142" fg:w="1"/><text x="59.9139%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="59.6639%" y="549" width="0.4202%" height="15" fill="rgb(248,177,22)" fg:x="142" fg:w="1"/><text x="59.9139%" y="559.50"></text></g><g><title>__GI___libc_free (1 samples, 0.42%)</title><rect x="60.5042%" y="629" width="0.4202%" height="15" fill="rgb(215,211,37)" fg:x="144" fg:w="1"/><text x="60.7542%" y="639.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.84%)</title><rect x="60.9244%" y="629" width="0.8403%" height="15" fill="rgb(241,128,51)" fg:x="145" fg:w="2"/><text x="61.1744%" y="639.50"></text></g><g><title>tcache_get (1 samples, 0.42%)</title><rect x="61.3445%" y="613" width="0.4202%" height="15" fill="rgb(227,165,31)" fg:x="146" fg:w="1"/><text x="61.5945%" y="623.50"></text></g><g><title>cidr::cidr::direct::&lt;impl core::str::traits::FromStr for cidr::cidr::Ipv4Cidr&gt;::from_str (1 samples, 0.42%)</title><rect x="61.7647%" y="629" width="0.4202%" height="15" fill="rgb(228,167,24)" fg:x="147" fg:w="1"/><text x="62.0147%" y="639.50"></text></g><g><title>cidr::cidr::from_str::cidr_from_str (1 samples, 0.42%)</title><rect x="61.7647%" y="613" width="0.4202%" height="15" fill="rgb(228,143,12)" fg:x="147" fg:w="1"/><text x="62.0147%" y="623.50"></text></g><g><title>core::net::parser::&lt;impl core::str::traits::FromStr for core::net::ip_addr::Ipv4Addr&gt;::from_str (1 samples, 0.42%)</title><rect x="61.7647%" y="597" width="0.4202%" height="15" fill="rgb(249,149,8)" fg:x="147" fg:w="1"/><text x="62.0147%" y="607.50"></text></g><g><title>core::net::parser::Parser::read_ipv4_addr (1 samples, 0.42%)</title><rect x="61.7647%" y="581" width="0.4202%" height="15" fill="rgb(243,35,44)" fg:x="147" fg:w="1"/><text x="62.0147%" y="591.50"></text></g><g><title>&lt;tcap::packet_types::tcap::IpAddress as core::convert::From&lt;&amp;str&gt;&gt;::from (6 samples, 2.52%)</title><rect x="60.0840%" y="645" width="2.5210%" height="15" fill="rgb(246,89,9)" fg:x="143" fg:w="6"/><text x="60.3340%" y="655.50">&lt;t..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.42%)</title><rect x="62.1849%" y="629" width="0.4202%" height="15" fill="rgb(233,213,13)" fg:x="148" fg:w="1"/><text x="62.4349%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.84%)</title><rect x="62.6050%" y="645" width="0.8403%" height="15" fill="rgb(233,141,41)" fg:x="149" fg:w="2"/><text x="62.8550%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::udp::UdpSocket::send_to&lt;alloc::string::String&gt;::{{closure}}&gt; (1 samples, 0.42%)</title><rect x="63.4454%" y="645" width="0.4202%" height="15" fill="rgb(239,167,4)" fg:x="151" fg:w="1"/><text x="63.6954%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.42%)</title><rect x="63.8655%" y="645" width="0.4202%" height="15" fill="rgb(209,217,16)" fg:x="152" fg:w="1"/><text x="64.1155%" y="655.50"></text></g><g><title>__GI___errno_location (1 samples, 0.42%)</title><rect x="64.2857%" y="597" width="0.4202%" height="15" fill="rgb(219,88,35)" fg:x="153" fg:w="1"/><text x="64.5357%" y="607.50"></text></g><g><title>mio::net::udp::UdpSocket::recv_from (12 samples, 5.04%)</title><rect x="64.2857%" y="645" width="5.0420%" height="15" fill="rgb(220,193,23)" fg:x="153" fg:w="12"/><text x="64.5357%" y="655.50">mio::n..</text></g><g><title>std::net::udp::UdpSocket::recv_from (12 samples, 5.04%)</title><rect x="64.2857%" y="629" width="5.0420%" height="15" fill="rgb(230,90,52)" fg:x="153" fg:w="12"/><text x="64.5357%" y="639.50">std::n..</text></g><g><title>std::sys::pal::unix::net::Socket::recv_from_with_flags (12 samples, 5.04%)</title><rect x="64.2857%" y="613" width="5.0420%" height="15" fill="rgb(252,106,19)" fg:x="153" fg:w="12"/><text x="64.5357%" y="623.50">std::s..</text></g><g><title>__libc_recvfrom (11 samples, 4.62%)</title><rect x="64.7059%" y="597" width="4.6218%" height="15" fill="rgb(206,74,20)" fg:x="154" fg:w="11"/><text x="64.9559%" y="607.50">__lib..</text></g><g><title>[unknown] (11 samples, 4.62%)</title><rect x="64.7059%" y="581" width="4.6218%" height="15" fill="rgb(230,138,44)" fg:x="154" fg:w="11"/><text x="64.9559%" y="591.50">[unkn..</text></g><g><title>[unknown] (11 samples, 4.62%)</title><rect x="64.7059%" y="565" width="4.6218%" height="15" fill="rgb(235,182,43)" fg:x="154" fg:w="11"/><text x="64.9559%" y="575.50">[unkn..</text></g><g><title>[unknown] (11 samples, 4.62%)</title><rect x="64.7059%" y="549" width="4.6218%" height="15" fill="rgb(242,16,51)" fg:x="154" fg:w="11"/><text x="64.9559%" y="559.50">[unkn..</text></g><g><title>[unknown] (11 samples, 4.62%)</title><rect x="64.7059%" y="533" width="4.6218%" height="15" fill="rgb(248,9,4)" fg:x="154" fg:w="11"/><text x="64.9559%" y="543.50">[unkn..</text></g><g><title>[unknown] (10 samples, 4.20%)</title><rect x="65.1261%" y="517" width="4.2017%" height="15" fill="rgb(210,31,22)" fg:x="155" fg:w="10"/><text x="65.3761%" y="527.50">[unkn..</text></g><g><title>[unknown] (9 samples, 3.78%)</title><rect x="65.5462%" y="501" width="3.7815%" height="15" fill="rgb(239,54,39)" fg:x="156" fg:w="9"/><text x="65.7962%" y="511.50">[unk..</text></g><g><title>[unknown] (8 samples, 3.36%)</title><rect x="65.9664%" y="485" width="3.3613%" height="15" fill="rgb(230,99,41)" fg:x="157" fg:w="8"/><text x="66.2164%" y="495.50">[un..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="66.3866%" y="469" width="2.9412%" height="15" fill="rgb(253,106,12)" fg:x="158" fg:w="7"/><text x="66.6366%" y="479.50">[u..</text></g><g><title>[unknown] (3 samples, 1.26%)</title><rect x="68.0672%" y="453" width="1.2605%" height="15" fill="rgb(213,46,41)" fg:x="162" fg:w="3"/><text x="68.3172%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.26%)</title><rect x="68.0672%" y="437" width="1.2605%" height="15" fill="rgb(215,133,35)" fg:x="162" fg:w="3"/><text x="68.3172%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="68.4874%" y="421" width="0.8403%" height="15" fill="rgb(213,28,5)" fg:x="163" fg:w="2"/><text x="68.7374%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="68.4874%" y="405" width="0.8403%" height="15" fill="rgb(215,77,49)" fg:x="163" fg:w="2"/><text x="68.7374%" y="415.50"></text></g><g><title>mio::net::udp::UdpSocket::send_to (40 samples, 16.81%)</title><rect x="69.3277%" y="645" width="16.8067%" height="15" fill="rgb(248,100,22)" fg:x="165" fg:w="40"/><text x="69.5777%" y="655.50">mio::net::udp::UdpSocket::..</text></g><g><title>std::sys_common::net::UdpSocket::send_to (40 samples, 16.81%)</title><rect x="69.3277%" y="629" width="16.8067%" height="15" fill="rgb(208,67,9)" fg:x="165" fg:w="40"/><text x="69.5777%" y="639.50">std::sys_common::net::UdpS..</text></g><g><title>__libc_sendto (39 samples, 16.39%)</title><rect x="69.7479%" y="613" width="16.3866%" height="15" fill="rgb(219,133,21)" fg:x="166" fg:w="39"/><text x="69.9979%" y="623.50">__libc_sendto</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="597" width="16.3866%" height="15" fill="rgb(246,46,29)" fg:x="166" fg:w="39"/><text x="69.9979%" y="607.50">[unknown]</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="581" width="16.3866%" height="15" fill="rgb(246,185,52)" fg:x="166" fg:w="39"/><text x="69.9979%" y="591.50">[unknown]</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="565" width="16.3866%" height="15" fill="rgb(252,136,11)" fg:x="166" fg:w="39"/><text x="69.9979%" y="575.50">[unknown]</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="549" width="16.3866%" height="15" fill="rgb(219,138,53)" fg:x="166" fg:w="39"/><text x="69.9979%" y="559.50">[unknown]</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="533" width="16.3866%" height="15" fill="rgb(211,51,23)" fg:x="166" fg:w="39"/><text x="69.9979%" y="543.50">[unknown]</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="517" width="16.3866%" height="15" fill="rgb(247,221,28)" fg:x="166" fg:w="39"/><text x="69.9979%" y="527.50">[unknown]</text></g><g><title>[unknown] (39 samples, 16.39%)</title><rect x="69.7479%" y="501" width="16.3866%" height="15" fill="rgb(251,222,45)" fg:x="166" fg:w="39"/><text x="69.9979%" y="511.50">[unknown]</text></g><g><title>[unknown] (37 samples, 15.55%)</title><rect x="70.5882%" y="485" width="15.5462%" height="15" fill="rgb(217,162,53)" fg:x="168" fg:w="37"/><text x="70.8382%" y="495.50">[unknown]</text></g><g><title>[unknown] (37 samples, 15.55%)</title><rect x="70.5882%" y="469" width="15.5462%" height="15" fill="rgb(229,93,14)" fg:x="168" fg:w="37"/><text x="70.8382%" y="479.50">[unknown]</text></g><g><title>[unknown] (34 samples, 14.29%)</title><rect x="71.8487%" y="453" width="14.2857%" height="15" fill="rgb(209,67,49)" fg:x="171" fg:w="34"/><text x="72.0987%" y="463.50">[unknown]</text></g><g><title>[unknown] (28 samples, 11.76%)</title><rect x="74.3697%" y="437" width="11.7647%" height="15" fill="rgb(213,87,29)" fg:x="177" fg:w="28"/><text x="74.6197%" y="447.50">[unknown]</text></g><g><title>[unknown] (27 samples, 11.34%)</title><rect x="74.7899%" y="421" width="11.3445%" height="15" fill="rgb(205,151,52)" fg:x="178" fg:w="27"/><text x="75.0399%" y="431.50">[unknown]</text></g><g><title>[unknown] (27 samples, 11.34%)</title><rect x="74.7899%" y="405" width="11.3445%" height="15" fill="rgb(253,215,39)" fg:x="178" fg:w="27"/><text x="75.0399%" y="415.50">[unknown]</text></g><g><title>[unknown] (24 samples, 10.08%)</title><rect x="76.0504%" y="389" width="10.0840%" height="15" fill="rgb(221,220,41)" fg:x="181" fg:w="24"/><text x="76.3004%" y="399.50">[unknown]</text></g><g><title>[unknown] (24 samples, 10.08%)</title><rect x="76.0504%" y="373" width="10.0840%" height="15" fill="rgb(218,133,21)" fg:x="181" fg:w="24"/><text x="76.3004%" y="383.50">[unknown]</text></g><g><title>[unknown] (22 samples, 9.24%)</title><rect x="76.8908%" y="357" width="9.2437%" height="15" fill="rgb(221,193,43)" fg:x="183" fg:w="22"/><text x="77.1408%" y="367.50">[unknown]</text></g><g><title>[unknown] (21 samples, 8.82%)</title><rect x="77.3109%" y="341" width="8.8235%" height="15" fill="rgb(240,128,52)" fg:x="184" fg:w="21"/><text x="77.5609%" y="351.50">[unknown]</text></g><g><title>[unknown] (17 samples, 7.14%)</title><rect x="78.9916%" y="325" width="7.1429%" height="15" fill="rgb(253,114,12)" fg:x="188" fg:w="17"/><text x="79.2416%" y="335.50">[unknown]</text></g><g><title>[unknown] (16 samples, 6.72%)</title><rect x="79.4118%" y="309" width="6.7227%" height="15" fill="rgb(215,223,47)" fg:x="189" fg:w="16"/><text x="79.6618%" y="319.50">[unknown]</text></g><g><title>[unknown] (16 samples, 6.72%)</title><rect x="79.4118%" y="293" width="6.7227%" height="15" fill="rgb(248,225,23)" fg:x="189" fg:w="16"/><text x="79.6618%" y="303.50">[unknown]</text></g><g><title>[unknown] (16 samples, 6.72%)</title><rect x="79.4118%" y="277" width="6.7227%" height="15" fill="rgb(250,108,0)" fg:x="189" fg:w="16"/><text x="79.6618%" y="287.50">[unknown]</text></g><g><title>[unknown] (15 samples, 6.30%)</title><rect x="79.8319%" y="261" width="6.3025%" height="15" fill="rgb(228,208,7)" fg:x="190" fg:w="15"/><text x="80.0819%" y="271.50">[unknown]</text></g><g><title>[unknown] (12 samples, 5.04%)</title><rect x="81.0924%" y="245" width="5.0420%" height="15" fill="rgb(244,45,10)" fg:x="193" fg:w="12"/><text x="81.3424%" y="255.50">[unkno..</text></g><g><title>[unknown] (11 samples, 4.62%)</title><rect x="81.5126%" y="229" width="4.6218%" height="15" fill="rgb(207,125,25)" fg:x="194" fg:w="11"/><text x="81.7626%" y="239.50">[unkn..</text></g><g><title>[unknown] (10 samples, 4.20%)</title><rect x="81.9328%" y="213" width="4.2017%" height="15" fill="rgb(210,195,18)" fg:x="195" fg:w="10"/><text x="82.1828%" y="223.50">[unkn..</text></g><g><title>[unknown] (10 samples, 4.20%)</title><rect x="81.9328%" y="197" width="4.2017%" height="15" fill="rgb(249,80,12)" fg:x="195" fg:w="10"/><text x="82.1828%" y="207.50">[unkn..</text></g><g><title>[unknown] (10 samples, 4.20%)</title><rect x="81.9328%" y="181" width="4.2017%" height="15" fill="rgb(221,65,9)" fg:x="195" fg:w="10"/><text x="82.1828%" y="191.50">[unkn..</text></g><g><title>[unknown] (7 samples, 2.94%)</title><rect x="83.1933%" y="165" width="2.9412%" height="15" fill="rgb(235,49,36)" fg:x="198" fg:w="7"/><text x="83.4433%" y="175.50">[u..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="83.6134%" y="149" width="2.5210%" height="15" fill="rgb(225,32,20)" fg:x="199" fg:w="6"/><text x="83.8634%" y="159.50">[u..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="84.0336%" y="133" width="2.1008%" height="15" fill="rgb(215,141,46)" fg:x="200" fg:w="5"/><text x="84.2836%" y="143.50">[..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="84.0336%" y="117" width="2.1008%" height="15" fill="rgb(250,160,47)" fg:x="200" fg:w="5"/><text x="84.2836%" y="127.50">[..</text></g><g><title>[unknown] (4 samples, 1.68%)</title><rect x="84.4538%" y="101" width="1.6807%" height="15" fill="rgb(216,222,40)" fg:x="201" fg:w="4"/><text x="84.7038%" y="111.50"></text></g><g><title>[unknown] (3 samples, 1.26%)</title><rect x="84.8739%" y="85" width="1.2605%" height="15" fill="rgb(234,217,39)" fg:x="202" fg:w="3"/><text x="85.1239%" y="95.50"></text></g><g><title>[unknown] (3 samples, 1.26%)</title><rect x="84.8739%" y="69" width="1.2605%" height="15" fill="rgb(207,178,40)" fg:x="202" fg:w="3"/><text x="85.1239%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="85.2941%" y="53" width="0.8403%" height="15" fill="rgb(221,136,13)" fg:x="203" fg:w="2"/><text x="85.5441%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="85.7143%" y="37" width="0.4202%" height="15" fill="rgb(249,199,10)" fg:x="204" fg:w="1"/><text x="85.9643%" y="47.50"></text></g><g><title>&lt;core::net::ip_addr::IpAddr as core::fmt::Display&gt;::fmt (1 samples, 0.42%)</title><rect x="86.5546%" y="613" width="0.4202%" height="15" fill="rgb(249,222,13)" fg:x="206" fg:w="1"/><text x="86.8046%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 1.26%)</title><rect x="87.3950%" y="565" width="1.2605%" height="15" fill="rgb(244,185,38)" fg:x="208" fg:w="3"/><text x="87.6450%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.84%)</title><rect x="87.8151%" y="549" width="0.8403%" height="15" fill="rgb(236,202,9)" fg:x="209" fg:w="2"/><text x="88.0651%" y="559.50"></text></g><g><title>tcap::packet_types::tcap::IpAddress::equals (7 samples, 2.94%)</title><rect x="86.1345%" y="645" width="2.9412%" height="15" fill="rgb(250,229,37)" fg:x="205" fg:w="7"/><text x="86.3845%" y="655.50">tc..</text></g><g><title>&lt;tcap::packet_types::tcap::IpAddress as core::convert::From&lt;core::net::socket_addr::SocketAddr&gt;&gt;::from (7 samples, 2.94%)</title><rect x="86.1345%" y="629" width="2.9412%" height="15" fill="rgb(206,174,23)" fg:x="205" fg:w="7"/><text x="86.3845%" y="639.50">&lt;t..</text></g><g><title>&lt;core::net::ip_addr::Ipv4Addr as core::fmt::Display&gt;::fmt (5 samples, 2.10%)</title><rect x="86.9748%" y="613" width="2.1008%" height="15" fill="rgb(211,33,43)" fg:x="207" fg:w="5"/><text x="87.2248%" y="623.50">&lt;..</text></g><g><title>core::fmt::write (5 samples, 2.10%)</title><rect x="86.9748%" y="597" width="2.1008%" height="15" fill="rgb(245,58,50)" fg:x="207" fg:w="5"/><text x="87.2248%" y="607.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (4 samples, 1.68%)</title><rect x="87.3950%" y="581" width="1.6807%" height="15" fill="rgb(244,68,36)" fg:x="208" fg:w="4"/><text x="87.6450%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.42%)</title><rect x="88.6555%" y="565" width="0.4202%" height="15" fill="rgb(232,229,15)" fg:x="211" fg:w="1"/><text x="88.9055%" y="575.50"></text></g><g><title>&lt;tcap::packet_types::tcap::CmdType as core::convert::From&lt;u32&gt;&gt;::from (1 samples, 0.42%)</title><rect x="89.0756%" y="629" width="0.4202%" height="15" fill="rgb(254,30,23)" fg:x="212" fg:w="1"/><text x="89.3256%" y="639.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.42%)</title><rect x="89.4958%" y="629" width="0.4202%" height="15" fill="rgb(235,160,14)" fg:x="213" fg:w="1"/><text x="89.7458%" y="639.50"></text></g><g><title>__rdl_alloc (2 samples, 0.84%)</title><rect x="89.9160%" y="581" width="0.8403%" height="15" fill="rgb(212,155,44)" fg:x="214" fg:w="2"/><text x="90.1660%" y="591.50"></text></g><g><title>__posix_memalign (2 samples, 0.84%)</title><rect x="89.9160%" y="565" width="0.8403%" height="15" fill="rgb(226,2,50)" fg:x="214" fg:w="2"/><text x="90.1660%" y="575.50"></text></g><g><title>__posix_memalign (2 samples, 0.84%)</title><rect x="89.9160%" y="549" width="0.8403%" height="15" fill="rgb(234,177,6)" fg:x="214" fg:w="2"/><text x="90.1660%" y="559.50"></text></g><g><title>_mid_memalign (2 samples, 0.84%)</title><rect x="89.9160%" y="533" width="0.8403%" height="15" fill="rgb(217,24,9)" fg:x="214" fg:w="2"/><text x="90.1660%" y="543.50"></text></g><g><title>_int_memalign (2 samples, 0.84%)</title><rect x="89.9160%" y="517" width="0.8403%" height="15" fill="rgb(220,13,46)" fg:x="214" fg:w="2"/><text x="90.1660%" y="527.50"></text></g><g><title>_int_malloc (2 samples, 0.84%)</title><rect x="89.9160%" y="501" width="0.8403%" height="15" fill="rgb(239,221,27)" fg:x="214" fg:w="2"/><text x="90.1660%" y="511.50"></text></g><g><title>malloc_consolidate (1 samples, 0.42%)</title><rect x="90.3361%" y="485" width="0.4202%" height="15" fill="rgb(222,198,25)" fg:x="215" fg:w="1"/><text x="90.5861%" y="495.50"></text></g><g><title>star_vs_chain_execution::chain::chain_benchmark_server::{{closure}}::{{closure}} (3 samples, 1.26%)</title><rect x="89.9160%" y="629" width="1.2605%" height="15" fill="rgb(211,99,13)" fg:x="214" fg:w="3"/><text x="90.1660%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (3 samples, 1.26%)</title><rect x="89.9160%" y="613" width="1.2605%" height="15" fill="rgb(232,111,31)" fg:x="214" fg:w="3"/><text x="90.1660%" y="623.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (3 samples, 1.26%)</title><rect x="89.9160%" y="597" width="1.2605%" height="15" fill="rgb(245,82,37)" fg:x="214" fg:w="3"/><text x="90.1660%" y="607.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (1 samples, 0.42%)</title><rect x="90.7563%" y="581" width="0.4202%" height="15" fill="rgb(227,149,46)" fg:x="216" fg:w="1"/><text x="91.0063%" y="591.50"></text></g><g><title>tcap::cap_table::tcap::cap_table::CapTable::get::{{closure}} (1 samples, 0.42%)</title><rect x="91.1765%" y="629" width="0.4202%" height="15" fill="rgb(218,36,50)" fg:x="217" fg:w="1"/><text x="91.4265%" y="639.50"></text></g><g><title>tcap::service::tcap::Service::parse::{{closure}} (13 samples, 5.46%)</title><rect x="89.0756%" y="645" width="5.4622%" height="15" fill="rgb(226,80,48)" fg:x="212" fg:w="13"/><text x="89.3256%" y="655.50">tcap::s..</text></g><g><title>tcap::service::tcap::Service::send::{{closure}} (7 samples, 2.94%)</title><rect x="91.5966%" y="629" width="2.9412%" height="15" fill="rgb(238,224,15)" fg:x="218" fg:w="7"/><text x="91.8466%" y="639.50">tc..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (7 samples, 2.94%)</title><rect x="91.5966%" y="613" width="2.9412%" height="15" fill="rgb(241,136,10)" fg:x="218" fg:w="7"/><text x="91.8466%" y="623.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (7 samples, 2.94%)</title><rect x="91.5966%" y="597" width="2.9412%" height="15" fill="rgb(208,32,45)" fg:x="218" fg:w="7"/><text x="91.8466%" y="607.50">to..</text></g><g><title>tokio::runtime::context::with_scheduler (7 samples, 2.94%)</title><rect x="91.5966%" y="581" width="2.9412%" height="15" fill="rgb(207,135,9)" fg:x="218" fg:w="7"/><text x="91.8466%" y="591.50">to..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 2.94%)</title><rect x="91.5966%" y="565" width="2.9412%" height="15" fill="rgb(206,86,44)" fg:x="218" fg:w="7"/><text x="91.8466%" y="575.50">pa..</text></g><g><title>syscall (7 samples, 2.94%)</title><rect x="91.5966%" y="549" width="2.9412%" height="15" fill="rgb(245,177,15)" fg:x="218" fg:w="7"/><text x="91.8466%" y="559.50">sy..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="92.0168%" y="533" width="2.5210%" height="15" fill="rgb(206,64,50)" fg:x="219" fg:w="6"/><text x="92.2668%" y="543.50">[u..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="92.0168%" y="517" width="2.5210%" height="15" fill="rgb(234,36,40)" fg:x="219" fg:w="6"/><text x="92.2668%" y="527.50">[u..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="92.0168%" y="501" width="2.5210%" height="15" fill="rgb(213,64,8)" fg:x="219" fg:w="6"/><text x="92.2668%" y="511.50">[u..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="92.0168%" y="485" width="2.5210%" height="15" fill="rgb(210,75,36)" fg:x="219" fg:w="6"/><text x="92.2668%" y="495.50">[u..</text></g><g><title>[unknown] (6 samples, 2.52%)</title><rect x="92.0168%" y="469" width="2.5210%" height="15" fill="rgb(229,88,21)" fg:x="219" fg:w="6"/><text x="92.2668%" y="479.50">[u..</text></g><g><title>[unknown] (5 samples, 2.10%)</title><rect x="92.4370%" y="453" width="2.1008%" height="15" fill="rgb(252,204,47)" fg:x="220" fg:w="5"/><text x="92.6870%" y="463.50">[..</text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="93.6975%" y="437" width="0.8403%" height="15" fill="rgb(208,77,27)" fg:x="223" fg:w="2"/><text x="93.9475%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.84%)</title><rect x="93.6975%" y="421" width="0.8403%" height="15" fill="rgb(221,76,26)" fg:x="223" fg:w="2"/><text x="93.9475%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="94.1176%" y="405" width="0.4202%" height="15" fill="rgb(225,139,18)" fg:x="224" fg:w="1"/><text x="94.3676%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.42%)</title><rect x="94.1176%" y="389" width="0.4202%" height="15" fill="rgb(230,137,11)" fg:x="224" fg:w="1"/><text x="94.3676%" y="399.50"></text></g><g><title>tokio::net::addr::&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for alloc::string::String&gt;::to_socket_addrs (1 samples, 0.42%)</title><rect x="94.5378%" y="645" width="0.4202%" height="15" fill="rgb(212,28,1)" fg:x="225" fg:w="1"/><text x="94.7878%" y="655.50"></text></g><g><title>core::net::parser::&lt;impl core::str::traits::FromStr for core::net::socket_addr::SocketAddr&gt;::from_str (1 samples, 0.42%)</title><rect x="94.5378%" y="629" width="0.4202%" height="15" fill="rgb(248,164,17)" fg:x="225" fg:w="1"/><text x="94.7878%" y="639.50"></text></g><g><title>core::net::parser::&lt;impl core::net::socket_addr::SocketAddr&gt;::parse_ascii (1 samples, 0.42%)</title><rect x="94.5378%" y="613" width="0.4202%" height="15" fill="rgb(222,171,42)" fg:x="225" fg:w="1"/><text x="94.7878%" y="623.50"></text></g><g><title>core::net::parser::Parser::read_atomically (1 samples, 0.42%)</title><rect x="94.5378%" y="597" width="0.4202%" height="15" fill="rgb(243,84,45)" fg:x="225" fg:w="1"/><text x="94.7878%" y="607.50"></text></g><g><title>tokio::runtime::io::registration::Registration::clear_readiness (1 samples, 0.42%)</title><rect x="94.9580%" y="645" width="0.4202%" height="15" fill="rgb(252,49,23)" fg:x="226" fg:w="1"/><text x="95.2080%" y="655.50"></text></g><g><title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::future::future::Future&gt;::poll (3 samples, 1.26%)</title><rect x="95.7983%" y="629" width="1.2605%" height="15" fill="rgb(215,19,7)" fg:x="228" fg:w="3"/><text x="96.0483%" y="639.50"></text></g><g><title>tokio::runtime::io::registration::Registration::readiness::{{closure}} (5 samples, 2.10%)</title><rect x="95.3782%" y="645" width="2.1008%" height="15" fill="rgb(238,81,41)" fg:x="227" fg:w="5"/><text x="95.6282%" y="655.50">t..</text></g><g><title>&lt;tokio::runtime::io::scheduled_io::Readiness as core::ops::drop::Drop&gt;::drop (1 samples, 0.42%)</title><rect x="97.0588%" y="629" width="0.4202%" height="15" fill="rgb(210,199,37)" fg:x="231" fg:w="1"/><text x="97.3088%" y="639.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.42%)</title><rect x="97.4790%" y="645" width="0.4202%" height="15" fill="rgb(244,192,49)" fg:x="232" fg:w="1"/><text x="97.7290%" y="655.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.42%)</title><rect x="97.4790%" y="629" width="0.4202%" height="15" fill="rgb(226,211,11)" fg:x="232" fg:w="1"/><text x="97.7290%" y="639.50"></text></g><g><title>tcap::service::tcap::Service::run::_{{closure}}::_{{closure}} (98 samples, 41.18%)</title><rect x="57.5630%" y="661" width="41.1765%" height="15" fill="rgb(236,162,54)" fg:x="137" fg:w="98"/><text x="57.8130%" y="671.50">tcap::service::tcap::Service::run::_{{closure}}::_{{closure}}</text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2 samples, 0.84%)</title><rect x="97.8992%" y="645" width="0.8403%" height="15" fill="rgb(220,229,9)" fg:x="233" fg:w="2"/><text x="98.1492%" y="655.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (1 samples, 0.42%)</title><rect x="98.3193%" y="629" width="0.4202%" height="15" fill="rgb(250,87,22)" fg:x="234" fg:w="1"/><text x="98.5693%" y="639.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (113 samples, 47.48%)</title><rect x="51.6807%" y="677" width="47.4790%" height="15" fill="rgb(239,43,17)" fg:x="123" fg:w="113"/><text x="51.9307%" y="687.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.42%)</title><rect x="98.7395%" y="661" width="0.4202%" height="15" fill="rgb(231,177,25)" fg:x="235" fg:w="1"/><text x="98.9895%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (1 samples, 0.42%)</title><rect x="99.1597%" y="661" width="0.4202%" height="15" fill="rgb(219,179,1)" fg:x="236" fg:w="1"/><text x="99.4097%" y="671.50"></text></g><g><title>all (238 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="238"/><text x="0.2500%" y="943.50"></text></g><g><title>tokio-runtime-w (179 samples, 75.21%)</title><rect x="24.7899%" y="917" width="75.2101%" height="15" fill="rgb(232,167,36)" fg:x="59" fg:w="179"/><text x="25.0399%" y="927.50">tokio-runtime-w</text></g><g><title>__clone3 (179 samples, 75.21%)</title><rect x="24.7899%" y="901" width="75.2101%" height="15" fill="rgb(244,19,51)" fg:x="59" fg:w="179"/><text x="25.0399%" y="911.50">__clone3</text></g><g><title>start_thread (179 samples, 75.21%)</title><rect x="24.7899%" y="885" width="75.2101%" height="15" fill="rgb(224,6,22)" fg:x="59" fg:w="179"/><text x="25.0399%" y="895.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (171 samples, 71.85%)</title><rect x="28.1513%" y="869" width="71.8487%" height="15" fill="rgb(224,145,5)" fg:x="67" fg:w="171"/><text x="28.4013%" y="879.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (171 samples, 71.85%)</title><rect x="28.1513%" y="853" width="71.8487%" height="15" fill="rgb(234,130,49)" fg:x="67" fg:w="171"/><text x="28.4013%" y="863.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (168 samples, 70.59%)</title><rect x="29.4118%" y="837" width="70.5882%" height="15" fill="rgb(254,6,2)" fg:x="70" fg:w="168"/><text x="29.6618%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (168 samples, 70.59%)</title><rect x="29.4118%" y="821" width="70.5882%" height="15" fill="rgb(208,96,46)" fg:x="70" fg:w="168"/><text x="29.6618%" y="831.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (167 samples, 70.17%)</title><rect x="29.8319%" y="805" width="70.1681%" height="15" fill="rgb(239,3,39)" fg:x="71" fg:w="167"/><text x="30.0819%" y="815.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (167 samples, 70.17%)</title><rect x="29.8319%" y="789" width="70.1681%" height="15" fill="rgb(233,210,1)" fg:x="71" fg:w="167"/><text x="30.0819%" y="799.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (167 samples, 70.17%)</title><rect x="29.8319%" y="773" width="70.1681%" height="15" fill="rgb(244,137,37)" fg:x="71" fg:w="167"/><text x="30.0819%" y="783.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (167 samples, 70.17%)</title><rect x="29.8319%" y="757" width="70.1681%" height="15" fill="rgb(240,136,2)" fg:x="71" fg:w="167"/><text x="30.0819%" y="767.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (167 samples, 70.17%)</title><rect x="29.8319%" y="741" width="70.1681%" height="15" fill="rgb(239,18,37)" fg:x="71" fg:w="167"/><text x="30.0819%" y="751.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (166 samples, 69.75%)</title><rect x="30.2521%" y="725" width="69.7479%" height="15" fill="rgb(218,185,22)" fg:x="72" fg:w="166"/><text x="30.5021%" y="735.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (118 samples, 49.58%)</title><rect x="50.4202%" y="709" width="49.5798%" height="15" fill="rgb(225,218,4)" fg:x="120" fg:w="118"/><text x="50.6702%" y="719.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (117 samples, 49.16%)</title><rect x="50.8403%" y="693" width="49.1597%" height="15" fill="rgb(230,182,32)" fg:x="121" fg:w="117"/><text x="51.0903%" y="703.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.84%)</title><rect x="99.1597%" y="677" width="0.8403%" height="15" fill="rgb(242,56,43)" fg:x="236" fg:w="2"/><text x="99.4097%" y="687.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.42%)</title><rect x="99.5798%" y="661" width="0.4202%" height="15" fill="rgb(233,99,24)" fg:x="237" fg:w="1"/><text x="99.8298%" y="671.50"></text></g></svg></svg>